## --------------------------------------------------------------------------
## 메서드 바인딩(Binding)
## => 메서드 호출 시 인터프리터가 전달 데이터 결정 및 전달
## => 인스턴스 메서드 : self            데코레이터 x   
## => 클래스   메서드 : cls             @classmethod
## => 순수/일반 메서드 : x              @staticmethod
## => 데코레이터를 사용해야함!! 
## --------------------------------------------------------------------------
## 개념 이해용 클래스
class C:
    def inst(self):             # 일반 인스턴스 메서드 : self 전달
        return "self OK"
    
    @staticmethod
    def sm(x) :                 # 정적 메서드 : 바인딩 없음
        return f'x={x}'
    
    @classmethod
    def cm(cls):               # 클래스 메서드 : cls 전달
        return f'cls={cls.__name__}'

## -------------------------------------------------------------------------
## 종류별 메서드 호출
## -------------------------------------------------------------------------
c = C()

# => 인스턴스 메서드 호출
print(c.inst())
# print(C.inst()) # ERROR, 클래스명으로 호출 x, self 안넘어감

# => 정적 메서드 호출, 클래스명으로 호출 가능
print(C.sm(10))
print(c.sm(10))

# => 클래스 메서드 호출, 클래스명으로 호출 가능
print(C.cm())
print(c.cm())